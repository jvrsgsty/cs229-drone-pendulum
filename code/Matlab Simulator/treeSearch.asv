%% Tree search
clc 
clear all
close all
state = [0,0,0,0,0,0,0,0,0,0.2,0.2,0.1,0.1];
x = [state(1)];
y = [state(2)];
z = [state(3)];
x_dot = [state(4)];
y_dot = [state(5)];
z_dot = [state(6)];
alpha = [state(7)];
beta = [state(8)];
gamma = [state(9)];
r = [state(10)];
s = [state(11)];
r_dot = [state(12)];
s_dot = [state(13)];
timeStep = 0.02;
L = 0.6;
for i =1:100
    [action, reward] = getAction1(state, timeStep);
    newState = getSuccessor(action, state, timeStep);
    state = newState;
    actions(i,:) = action;
    rewards(i) = reward;
    x(i+1) = state(1);
    y(i+1) = state(2);
    z(i+1) = state(3);
    x_dot(i+1) = state(4);
    y_dot(i+1) = state(5);
    z_dot(i+1) = state(6);
    alpha(i+1) = state(7);
    beta(i+1) = state(8);
    gamma(i+1) = state(9);
    r(i+1) = state(10);
    s(i+1) = state(11);
    r_dot(i+1) = state(12);
    s_dot(i+1) = state(13);
    if sqrt(r(i+1)^2+s(i+1)^2) > sqrt(2)/2*L 
        break
    end
end


function [bestAction, reward] = getAction1(state, timeStep)
oldReward = -Inf;
g = 9.81;
bestAction = [g,0,0,0];
for index = 1:5^4
    action = ind2action(index);
    newState = getSuccessor(action, state, timeStep);
    r = newState(10);
    s = newState(11);
    r_dot = newState(12);
    s_dot = newState(13);
    z = newState(3);
    z_dot = newState(6);
    L = sqrt((r+timeStep*r_dot)^2+(s+timeStep*s_dot)^2);
    reward = 1-L;
    if reward > oldReward
       oldReward = reward;
       bestAction = action;
    end 
end
reward = oldReward;
end 

function [bestAction, reward] = getAction2(state, timeStep)
oldReward = -Inf;
g = 9.81;
bestAction = [g,0,0,0];
for index1 = 1:5^4
    action1 = ind2action(index1);
    newState1 = getSuccessor(action1, state, timeStep);
    for index2 = 1:5^4
        action2 = ind2action(index2);
        newState2 = getSuccessor(action2, newState1, timeStep);
        r = newState2(10);
        s = newState2(11);
        r_dot = newState(12);
        s_dot = newState(13);
        z = newState(3);
        z_dot = newState(6);
        L = sqrt((r+timeStep*r_dot)^2+(s+timeStep*s_dot)^2);
        reward = 1-L;
        if reward > oldReward
            oldReward = reward;
            bestAction = action;
        end
    end
     
end
reward = oldReward;
end